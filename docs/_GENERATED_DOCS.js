var _DOCS = new Array();
_DOCS["EMULATOR"] = "<h2 id=\"emulator-instructions\">EMULATOR Instructions</h2><hr>"
+"<p><img src=https://github.com/RetroAppleJS/AppleII-IDE/raw/main/res/appleIIplus_bck_650.png?raw=true\" width=40% align=\"left\" />"
+"Unsurprisingly, the use of this emulator hardly differs from the real hardware.<br></p>"
+"<p><strong>All basic functions remain self-explanatory</strong>  <br>"
+"* cold boot: press the power button on the pop-up keyboard  <br>"
+"* warm boot: press the reset button on the pop-up keyboard  <br>"
+"<img src=\"https://github.com/RetroAppleJS/AppleII-IDE/raw/main/res/appleIIplus_kbd_650.png?raw=true\" width=40%/>  <br>"
+"* insert disk: press the right disk drive to load any disk file found on the internet (.do, .dsk), after, perform a cold boot  <br>"
+"<em>note: most apple][ disks do not boot, it was not uncommon to keep a bootable disk image at hand reach.</em>  </p>"
+"<p><strong>A handful new functions make the experience complete</strong>  <br>"
+"* pasteboard: use the pasteboard to paste any text through the text prompt, just mind that a 1 MHz computer takes this slowly.  <br>"
+"* monitor:  <br>"
+"* pause:  </p>"

_DOCS["DEBUGGER"] = "<h2 id=\"debugger-instructions\">DEBUGGER Instructions</h2><hr>"
+"<h3 id=\"the-display\">The Display</h3>"
+"<p>The display shows all registers of a 6502/6510 CPU:</p>"
+"<pre><code>  PC  ....    Program Counter<br>"
+"  A   ....    Accumulator<br>"
+"  X   ....    X Register<br>"
+"  Y   ....    Y Register<br>"
+"  SR  ....    Status Register<br>"
+"  SP  ....    Stack Pointer</code></pre>"
+"<p>The status register (SR) holds the following flags (from bit 7 to 0):</p>"
+"<pre><code>  N   ....    Negative<br>"
+"  V   ....    Overflow<br>"
+"  –   ....    ignored<br>"
+"  B   ....    Break<br>"
+"  D   ....    Decimal<br>"
+"  I   ....    Interrupt (IRQ disable)<br>"
+"  Z   ....    Zero<br>"
+"  C   ....    Carry</code></pre>"
+"<p>The line disassembler shows the current value of PC, the content of the according memory address (the next instruction followed by the operands, if any), and a disassembly of this instruction.</p>"
+"<p>The cycle time display shows the ticks of exceeded CPU time (including extra cycles for branches page transitions).</p>"
+"<h3 id=\"setting-the-registers\">Setting the Registers</h3>"
+"<p>Click a registers label to set its value.<br>"
+"Click on a SR flag to flip its value.</p>"
+"<h3 id=\"memory\">Memory</h3>"
+"<p>The emulator implements 64 k of memory for the full 16 bit address range.<br>"
+"The 6502's stack of 1 k range is located at 0100 to 01FF (hard wired).</p>"
+"<h3 id=\"accessing-the-memory\">Accessing the Memory</h3>"
+"<p>The button \"look up mem #\" offers a quick inspection of a 16 byte range around any address.<br>"
+"You may enter any amount of hex code into the memory inspector's pane and load it to the specified start address.<br>"
+"Further the memory inspector lets you inspect the memory in steps of 128 (0x80) bytes (half page). You may alter the display's content and load it back the emulator's memory. (Any figures prefixed by a colon \":\" are ignored as line numbers.)<br>"
+"The \"show ASCII\" option shows the according ASCII characters at the left of each line (if applicable). Uncheck this when transfering memory to the disassembler.<br>"
+"Last there's an option to load the ROMs of the Commodore 64 (® CBM) to the according addresses (A000-BFFF, D000-FFFF) – for all those who can't help nostalgia. (Note: The emulator does not implement the C64's bank switching feature.)</p>"
+"<h3 id=\"about-the-debugger\">About the Debugger</h3>"
+"<p>The emulator is written in JavaScript and emulates a 65xx-family micro processor unit that was the heart of so popular micro computers as the Apple II (6502) or the Commedore 64 (6510). The most common types, the 6502 and 6510 processors, are basicly the same and share the same instruction tables. (The 6510 varies from 6502 only in the implementation of 6 I/O ports at addresses 0000 and 0001.)<br>"
+"The emulator implements all legal instructions. Undefined opcodes are ignored (treated as NOP, No OPeration, with cycle time 0) – no pseudo-opcodes are implemented.</p>"

_DOCS["ZEROPAGE_APPLE2PLUS"] = "<p>$00-$05 - ???  <br>"
+"  $06-$09 - Free Space  <br>"
+"  $0A-$0C - JMP to USR() User Function Routine  <br>"
+"  $0D-$17 - ???  <br>"
+"  $18     - First Data Track  <br>"
+"  $19     - First Data Sector  <br>"
+"  $1A-$1B - Shape Pointer for DRAW  <br>"
+"  $1C     - Last COLOR Used  <br>"
+"  $1D-$1E - Free Space  <br>"
+"  $1F     - ???  <br>"
+"  $20     - Left Margin (0 - 39/79, 0 is default)  <br>"
+"  $21     - Width (1 - 40/80, 40 is default, 0 crashes Applesoft)  <br>"
+"  $22     - Top Margin (0 - 23, 0 is default, 20 in graphics mode)  <br>"
+"  $23     - Bottom Margin (0 - 23, 23 is default)  <br>"
+"  $24     - Horizontal Cursor Position (0 - 39/79)  <br>"
+"  $25     - Vertical Cursor Position (0 - 23)  <br>"
+"  $26-$27 - Address of Byte Containing X,Y  <br>"
+"  $28-$29 - Base Address of Text Cursor's Position  <br>"
+"  $2A     - ???  <br>"
+"  $2B     - Boot Slot * 16  <br>"
+"  $2C     - Lo-Res HLIN/VLIN Endpoint  <br>"
+"  $2D-$2F - ???  <br>"
+"  $30     - COLOR Value * 17  <br>"
+"  $31     - ???  <br>"
+"  $32     - Text Mask ($FF = Normal, $7F = Inverse, $3F = Flashing)  <br>"
+"  $33     - Prompt Character  <br>"
+"  $34-$35 - ???  <br>"
+"  $36-$37 - Address of Output Routine  <br>"
+"  $38-$39 - Address of Input Routine  <br>"
+"  $3A-$4F - ???  <br>"
+"  $50-$51 - Result of the Conversion of the FAC to a 16-Bit Integer  <br>"
+"  $52-$66 - ???  <br>"
+"  $67-$68 - Address of Beginning of BASIC Program ($0801 is default)  <br>"
+"  $69-$6A - Address of Beginning of BASIC Variables  <br>"
+"  $6B-$6C - Address of Beginning of BASIC Arrays  <br>"
+"  $6D-$6E - Address of End of BASIC Variables  <br>"
+"  $6F-$70 - Address of End of String Data  <br>"
+"  $71-$72 - Address to Move String To  <br>"
+"  $73-$74 - Address of Beginning of String Data  <br>"
+"  $75-$76 - Current Line Number Being Executed  <br>"
+"  $77-$78 - Line Number Where END or STOP or BREAK Occurred  <br>"
+"  $79-$7A - Address of Line Number Being Executed  <br>"
+"  $7B-$7C - Current Address of DATA  <br>"
+"  $7D-$7E - Next Address of DATA  <br>"
+"  $7F-$80 - Address of Input or Data  <br>"
+"  $81-$82 - Last Used Variable's Name  <br>"
+"  $83-$84 - Last Used Variable's Address  <br>"
+"  $85-$9A - ???  <br>"
+"  $9B-$9C - Pointer for $D61A and $F7D9  <br>"
+"  $9D-$A3 - Floating Point Accumulator (FAC)  <br>"
+"  $A4     - ???  <br>"
+"  $A5-$AB - Floating Point Argument Register (ARG)  <br>"
+"  $AC-$AE - ???  <br>"
+"  $AF-$B0 - Address of End of BASIC Program  <br>"
+"  $B1-$B6 - Subroutine to Increase the String Data Pointer  <br>"
+"  $B7-$BE - Subroutine to Return the Character Pointed to by the String Data Pointer  <br>"
+"  $BF-$CD - ???  <br>"
+"  $CE-$CF - Free Space  <br>"
+"  $D0-$D3 - ???  <br>"
+"  $D4     - Error Code Flag  <br>"
+"  $D5-$D6 - ???  <br>"
+"  $D7     - Free Space  <br>"
+"  $D8     - Error Flag (Bit 7 Set if an Error Handler is Used)  <br>"
+"  $D9     - ???  <br>"
+"  $DA-$DB - Line Number Where Error Occurred  <br>"
+"  $DC-$DD - ???  <br>"
+"  $DE     - Error Code  <br>"
+"  $DF     - ???  <br>"
+"  $E0-$E1 - Horizontal Coordinate of HPLOT  <br>"
+"  $E2     - Vertical Coordinate of HPLOT  <br>"
+"  $E3     - Free Space  <br>"
+"  $E4     - HCOLOR Value (0=0, 1=42, 2=85, 3=127, 4=128, 5=170, 6=213, 7=255)  <br>"
+"  $E5     - ???  <br>"
+"  $E6     - High Byte of Address of First Byte of Where HGR is Plotted  <br>"
+"  $E7     - SCALE Value (0 = 256)  <br>"
+"  $E8-$E9 - Address of Shape Table  <br>"
+"  $EA     - DRAW/XDRAW Collision Count  <br>"
+"  $EB-$EF - Free Space  <br>"
+"  $F0     - ???  <br>"
+"  $F1     - SPEED Value (Subtracted From 256)  <br>"
+"  $F2     - ???  <br>"
+"  $F3     - Text OR Mask for Flashing Text  <br>"
+"  $F4-$F5 - Address of Error Handler (Line Number after ONERR GOTO)  <br>"
+"  $F6-$F8 - ???  <br>"
+"  $F9     - ROT Value  <br>"
+"  $FA-$FE - Free Space  <br>"
+"  $FF     - Used by Applesoft's STR$ Function  </p>"

_DOCS["ASSEMBLER"] = "<h2 id=\"assembler-instructions\">ASSEMBLER Instructions</h2><hr>"
+"<p>This is a simple 2 pass assembler for the 65xx microprocessor. It is thought to accompany the emulator To get your source code compiled:</p>"
+"<ol>"
+"<li>Enter your src in \"source code\" pane.</li>"
+"<li>Click the button \"generate\".</li>"
+"<li>Watch progress in \"listing\" pane.</li>"
+"<li>Copy code from \"object code\" pane.<br></li>"
+"</ol>"
+"<h3 id=\"syntax\">Syntax</h3>"
+"<p>The assembler supports the following syntax:</p>"
+"<h4 id=\"opcodes-and-addressing\">Opcodes and Addressing</h4>"
+"<p>Opcodes are always 3 letter mnemonics followed by an (optional) operand/address:</p>"
+"<pre><code>  OPC         ....    implied<br>"
+"  OPC A       ....    Accumulator<br>"
+"  OPC #BB     ....    immediate<br>"
+"  OPC HHLL    ....    absolute<br>"
+"  OPC HHLL,X  ....    absolute, X-indexed<br>"
+"  OPC HHLL,Y  ....    absolute, Y-indexed<br>"
+"  OPC *LL     ....    zeropage<br>"
+"  OPC *LL,X   ....    zeropage, X-indexed<br>"
+"  OPC *LL,Y   ....    zeropage, Y-indexed<br>"
+"  OPC (BB,X)  ....    X-indexed, indirect<br>"
+"  OPC (LL),Y  ....    indirect, Y-indexed<br>"
+"  OPC (HHLL)  ....    indirect<br>"
+"  OPC BB      ....    relative</code></pre>"
+"<p>Where HHLL is a 16bit word and LL or BB an 8 bit byte, and A is literal \"A\".<br>"
+"There must not be any white space in any part of an instruction's address.</p>"
+"<h4 id=\"number-formats\">Number Formats</h4>"
+"<pre><code>  $[0-9A-Fa-f] ....  hex<br>"
+" %[01]        ....   binary<br>"
+" 0[0-7]       ....   octal<br>"
+" [0-9]        ....   decimal<br>"
+" <            ....   LO-byte portion<br>"
+" >            ....   HI-byte portion</code></pre>"
+"<h4 id=\"labels-and-identifiers\">Labels and Identifiers</h4>"
+"<p>Identifiers must begin with a letter [A-Z] and contain letters, digits, and the underscore [A-Z0-9_]. Only the first 6 characters are significant.</p>"
+"<p>All identifiers, numbers, opcodes, and pragmas are case insensitive and translated to upper case. Identifiers must not be the same as valid opcodes.</p>"
+"<p>The special identifier \"*\" refers to the program counter (PC).</p>"
+"<h5 id=\"exampels\">Exampels:</h5>"
+"<pre><code> * = $C000       ....   Set start address (PC) to C000.<br>"
+"org $C000     ....    (idem)<br>"
+"LABEL1 LDA #4 ....    Define LABEL1 with address of instruction LDA.<br>"
+"BNE LABEL2    ....    Jump to address of label LABEL2.<br>"
+"STORE = $0800 ....    Define STORE with value 0800.<br>"
+"HERE = *      ....    Define HERE with current address (PC).<br>"
+"HERE2         ....    Define HERE2 with current address (PC).<br>"
+"LDA #         ....    Load LO-byte of VAL1.</code></pre>"
+"<h4 id=\"pragmas\">Pragmas</h4>"
+"<pre><code>  Pragmas start with a dot (.) and must be the only expression in a line:<br>"
+"  .BYTE BB    ....    Insert 8 bit byte at current address into code.<br>"
+"  .WORD HHLL  ....    Insert 16 bit word at current address into code.<br>"
+"  .END    ....    End of source, stop assembly. (optional)</code></pre>"
+"<h4 id=\"comments\">Comments</h4>"
+"<pre><code>  ; comment   ....    Any sequence of characters after a semicolon util end of the line is ignored.</code></pre>"
+"<h4 id=\"white-space\">White Space</h4>"
+"<pre><code>  The assembler does not rely on any special formatting with following exclusion:</code></pre>"
+"<p>There must be white space between a label and a opcode and the opcode and any operands. Only one instruction per line is permitted.</p>"
+"<h4 id=\"code-example\">Code Example</h4>"
+"<h5 id=\"src\">Src:</h5>"
+"<pre><code>*=$c000<br>"
+"         LDX #0<br>"
+"  Label1 TXA<br>"
+"         STA $0400,X<br>"
+"       LDA #1<br>"
+"       STA $D800,X<br>"
+"       INX<br>"
+"       BNE Label1<br>"
+"       RTS<br>"
+".END</code></pre>"
+"<h5 id=\"listing\">Listing:</h5>"
+"<pre><code> *=$C000<br>"
+" C000        LDX #$00        A2 00<br>"
+" C002 LABEL1 TXA             8A<br>"
+" C003        STA $0400,X     9D 00 04<br>"
+" C006        LDA #$01        A9 01<br>"
+" C008        STA $D800,X     9D 00 D8<br>"
+" C00B        INX             E8<br>"
+" C00C        BNE LABEL1      D0 F4<br>"
+" C00E        RTS             60<br>"
+"  C00F .END</code></pre>"
+"<h5 id=\"object-code\">Object Code:</h5>"
+"<pre><code>  A2 00 8A 9D 00 04 A9 01<br>"
+"  9D 00 D8 E8 D0 F4 60</code></pre>"

_DOCS["TOOLS"] = "<h2 id=\"tools-explained\">TOOLS Explained</h2><hr>"
+"<p>In the <a href=\"https://github.com/RetroAppleJS/AppleII-IDE/tree/main/tools\">tools folder</a>, we keep a collection of helpers to simulate, better understand or automate processes supporting the development of the IDE.  Every tool is designed to run in the browser, just like the IDE, using HTML/CSS/JavaScript.</p>"
+"<h3 id=\"docs_updaterhtml\">DOCS_updater.html</h3>"
+"<p>We aim to have all the documentation available in markdown format, for easy online access and editing in GitHub.  Docs_updater.html was designed to read all the markdown documentation available online in this project, and compile a JavaScript include file that would provide a perfect copy of all the available documentation inside the IDE.  The following diagram shows how clearly the steps:  </p>"
+"<ul>"
+"<li><p>Fetch Readme.me file from GitHub</p></li>"
+"<li><p>extract all *.md file links located in /docs ➡️ fetch all listed .md files</p></li>"
+"<li><p>convert each to HTML and append to JavaScript file</p></li>"
+"<li><p>preview</p></li>"
+"<li><p>download the JavaScript file</p></li>"
+"<li><p>overwite file in /docs folder.</p>"
+"<pre><code><div style=width:800px><br>"
+"┌──────────┐          ┌────┐ ┌───────────┐       ┌──────────────────┐<br>"
+"│Readme.md │          │*.md│ │Showdown.js│       │ COM_markdown.css │<br>"
+"└────┬─────┘          └─┬──┘ └─────┬─────┘       └────────┬─────────┘<br>"
+"     │XmlHttp()         |XmlHttp() │include               |include<br>"
+"┌────┴─────────┐     ┌──┴──────────┴─────┐       ┌────────┴─────────┐     ┌────────────────────┐<br>"
+"│Extract *.md  │     │Read next .md file,│       | Preview/test HTML|     | Download JS file   |<br>"
+"│links located ├─────┤convert to HTML &  ├───┐───┤ generated by     ├─────┤ _GENERATED_DOCS.js | <br>"
+"│in /docs      │  ▲  │append to JS file  |   │   | JavaScript file  |     |(overwrite in /docs)|<br>"
+"└──────────────┘  │  └───────────────────┘   │   └──────────────────┘     └────────────────────┘<br>"
+"                  │    loop until done       │<br>"
+"                  └──────────────────────────┘<br>"
+"</div></code></pre></li>"
+"</ul>"
+"<p>/<ins> <strong>!</strong> </ins>\ mind that DOCS_updater.html only captures the latest version of the markdown files 2-10 min after the last edits.  This must be the time GitHub requires to update the raw files on the server.</p>"
+"<h3 id=\"monitor_palettehtml\">Monitor_palette.html</h3>"
+"<p>Color graphics never really impressed on the Apple II, even if owners of a razor-sharp monochrome green or amber monitor often longed to see some color, noone at the time would exchange a color for a genuine crisp monochrome monitor.<br>"
+"The emulator's display however offers an easy switching capability to render in color, black&white, green and amber as some graphics really look nicer in color or monochrome.<br>"
+"This tool was made to test and assure the best image rendering approximation with these respective monitors.<br>"
+"It produces a Javascript snippet that seamlessly maps the colors.</p>"
